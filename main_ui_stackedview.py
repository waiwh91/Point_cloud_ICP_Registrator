# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.8.0.dev2411221125
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from pyqtgraph.opengl import GLViewWidget
from pyqtgraph import AxisItem
import pyqtgraph as pg
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QApplication



import point_cloud_viewer
import Icp_registrator
import pre_change_attributions
import prechange_viewer

import open3d as o3d
import numpy as np
import copy
import datetime
import os
import time

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1625, 863)
        self.app = MainWindow
        self.stackedView = QtWidgets.QStackedWidget(MainWindow)
        self.stackedView.resize(1625, 863)
        self.page_ict = QtWidgets.QWidget()
        self.page_prechange = QtWidgets.QWidget()

        self.stackedView.addWidget(self.page_ict)
        self.stackedView.addWidget(self.page_prechange)



        self.setupICTUi(self.page_ict)
        self.setupPreChangeUI(self.page_prechange)



        self.stackedView.setCurrentWidget(self.page_ict)


    def setupICTUi(self, MainWindow):


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1625, 863)
        MainWindow.setStyleSheet("background-color: rgb(155, 155, 155);")

        # self.Navigator = QtWidgets.QTabWidget(MainWindow)
        # self.Navigator.setGeometry(QtCore.QRect(0, 0, 100, 100))
        #
        # self.tab1 = QtWidgets.QWidget()
        # self.tab1.setObjectName("tab1")
        # self.tab2 = QtWidgets.QWidget()
        # self.tab2.setObjectName("tab2")

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Pcd_template = GLViewWidget(parent=self.centralwidget)
        self.Pcd_template.setBackgroundColor(QtGui.QColor(135, 135, 135))
        self.Pcd_template.setObjectName("Pcd_template")
        self.Pcd_template.setGeometry(QtCore.QRect(20, 10, 701, 381))
        self.Pcd_template.setObjectName("Pcd_template")
        self.Ict_target = GLViewWidget(parent=self.centralwidget)
        self.Ict_target.setBackgroundColor(QtGui.QColor(135, 135, 135))
        self.Ict_target.setGeometry(QtCore.QRect(20, 410, 701, 381))
        self.Ict_target.setObjectName("Ict_target")
        self.ict_result = GLViewWidget(parent=self.centralwidget)
        self.ict_result.setBackgroundColor(QtGui.QColor(135, 135, 135))
        self.ict_result.setGeometry(QtCore.QRect(740, 10, 731, 641))
        self.ict_result.setObjectName("ict_result")
        self.input_template = QtWidgets.QPushButton(parent=self.centralwidget)
        self.input_template.setGeometry(QtCore.QRect(1500, 30, 111, 61))
        self.input_template.setObjectName("input_template")
        self.input_target = QtWidgets.QPushButton(parent=self.centralwidget)
        self.input_target.setGeometry(QtCore.QRect(1500, 120, 111, 61))
        self.input_target.setObjectName("input_target")

        self.ict_settings = QtWidgets.QPushButton(parent=self.centralwidget)
        self.ict_settings.setGeometry(QtCore.QRect(1500, 210, 111, 61))
        self.ict_settings.setObjectName("ict_settings")

        self.start_ict = QtWidgets.QPushButton(parent=self.centralwidget)
        self.start_ict.setGeometry(QtCore.QRect(1500, 340, 111, 61))
        self.start_ict.setObjectName("start_ict")
        self.save_matrix = QtWidgets.QPushButton(parent=self.centralwidget)
        self.save_matrix.setGeometry(QtCore.QRect(1500, 440, 111, 61))
        self.save_matrix.setObjectName("save_matrix")
        self.matrix = QtWidgets.QPlainTextEdit(parent=self.centralwidget)
        self.matrix.setGeometry(QtCore.QRect(740, 660, 731, 131))
        self.matrix.setObjectName("matrix")
        self.matrix.setStyleSheet("QPlainTextEdit { color: black; }")
        self.load_matrix = QtWidgets.QPushButton(parent=self.centralwidget)
        self.load_matrix.setGeometry(QtCore.QRect(1500, 540, 111, 61))
        self.load_matrix.setObjectName("load_matrix")
        self.clear_viewer = QtWidgets.QPushButton(parent=self.centralwidget)
        self.clear_viewer.setGeometry(QtCore.QRect(1500, 740, 111, 61))
        self.clear_viewer.setObjectName("clear_viewer")
        self.compare = QtWidgets.QPushButton(parent=self.centralwidget)
        self.compare.setGeometry(QtCore.QRect(1500, 640, 111, 61))
        self.compare.setObjectName("compare")

        #
        # MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 1625, 27))
        # self.menubar.setObjectName("menubar")
        # MainWindow.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



        self.ict_button_bind()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Radar_ICT_Tool"))
        self.input_template.setText(_translate("MainWindow", "导入模版"))
        self.input_target.setText(_translate("MainWindow", "导入目标"))
        self.start_ict.setText(_translate("MainWindow", "开始配准"))
        self.save_matrix.setText(_translate("MainWindow", "保存变换矩阵"))
        self.load_matrix.setText(_translate("MainWindow", "导入变换矩阵"))
        self.clear_viewer.setText(_translate("MainWindow", "清空"))
        self.compare.setText(_translate("MainWindow", "重叠对比"))
        self.ict_settings.setText(_translate("MainWindow", "粗配准设定"))

    def ict_button_bind(self):
        self.input_template.clicked.connect(self.import_template)
        self.input_target.clicked.connect(self.import_target)
        self.start_ict.clicked.connect(self.start_registration)
        self.compare.clicked.connect(self.result_compare)
        self.save_matrix.clicked.connect(self.save_transformation_matrix)
        self.load_matrix.clicked.connect(self.open_saved_transformation_matrix)
        self.clear_viewer.clicked.connect(self.clear_view)
        self.ict_settings.clicked.connect(self.open_pre_change)



    def switch_to_ict(self):
        self.app.resize(1625, 863)

        copy = self.original_pcd_target
        self.copy_original = copy

        self.stackedView.setCurrentWidget(self.page_ict)
        print(self.pre_change_attributions.change_matrix)

    def switch_to_prechange(self):
        self.app.resize(1116, 841)
        self.stackedView.setCurrentWidget(self.page_prechange)





    def clearUI(self):
        for i in range(self.app.layout().count()):

            self.app.layout().itemAt(i).widget().deleteLater()

    def import_target(self):
        print('import_target')
        select_form = QFileDialog()
        pcd_target_filepath, _ = select_form.getOpenFileName(None, '选择配准目标', '.', 'pcd(*.pcd)')

        self.original_target_path = pcd_target_filepath

        self.global_transformation_matrix = np.asarray([[0.0, 0.0, 1.0, 0.0],
                                                        [-1.0, 0.0, 0.0, 0.0],
                                                        [0.0, -1.0, 0.0, 0.0],
                                                        [0.0, 0.0, 0.0, 1.0]])
        self.target_name = os.path.basename(pcd_target_filepath)

        self.original_pcd_target = o3d.io.read_point_cloud(pcd_target_filepath)

        self.copy_original =o3d.io.read_point_cloud(pcd_target_filepath)


        self.pcd_target = o3d.io.read_point_cloud(pcd_target_filepath).transform(self.global_transformation_matrix)
        self.pcd_target = self.pcd_target.transform(self.global_transformation_matrix)


        print(pcd_target_filepath)
        self.show_target_pcd(self.pcd_target)

    def import_template(self):
        print('import_template')

        select_form = QFileDialog()

        pcd_template_filepath, _ = select_form.getOpenFileName(None, '选择配准模版', '.', 'pcd(*.pcd)')

        self.pcd_template = o3d.io.read_point_cloud(pcd_template_filepath)

        print(pcd_template_filepath)

        self.show_template_pcd(self.pcd_template)

        # if select_form.exec() :
        #     fileNames = select_form.selectedFiles()

    def show_template_pcd(self, pcd):

        template_viewer = point_cloud_viewer.PointCloudViewer(parent=self.Pcd_template, pcd=pcd, type="Template")
        self.Pcd_template.clear()
        self.Pcd_template.addItem(template_viewer.pcd_plot_item)


    def show_target_pcd(self, pcd):
        target_viewer = point_cloud_viewer.PointCloudViewer(parent=self.Ict_target, pcd=pcd, type="Target")
        self.Ict_target.clear()
        self.Ict_target.addItem(target_viewer.pcd_plot_item)

    def start_registration(self):

        icp_registrator = Icp_registrator.ICP_Registrator(self.pcd_template, self.pcd_target)
        self.icp_result, self.icp_matrix,fitness, rmse = icp_registrator.icp_registration()
        print(f"fitness is{fitness}, rmse is{rmse}")
        o3d.io.write_point_cloud(f"Data/Output/Output{self.target_name}.pcd", self.icp_result)
        self.matrix.setPlainText(str(self.icp_matrix))
        result_viewer = point_cloud_viewer.PointCloudViewer(parent=self.ict_result, pcd=self.icp_result, type="Result")
        self.ict_result.clear()
        self.ict_result.addItem(result_viewer.pcd_plot_item)




    def result_compare(self):
        ###########################################################################################COMPARE WITH GIVEN RESULT

        rot90 = np.asarray([[0, -1, 0, 0],
                            [1, 0, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]])
        self.draw_registration_result(self.pcd_template, self.icp_result)



    def draw_registration_result(self, source, target):

        source_temp = copy.deepcopy(source)
        target_temp = copy.deepcopy(target)
        source_temp.paint_uniform_color([1, 0.706, 0])
        target_temp.paint_uniform_color([0, 0.651, 0.929])

        o3d.visualization.draw_geometries([source_temp, target_temp],
                                          zoom=0.4459,
                                          front=[0.9288, -0.2951, -0.2242],
                                          lookat=[1.6784, 2.0612, 1.4451],
                                          up=[-0.3402, -0.9189, -0.1996])

    def save_transformation_matrix(self):
        time = datetime.datetime.now()
        print(time)
        npmatrix = np.asarray(self.icp_matrix)
        np.save(f"{time}.npy", npmatrix)

    def open_saved_transformation_matrix(self):
        select_form = QFileDialog()
        matrix_filepath, _ = select_form.getOpenFileName(None, '选择变换矩阵', '.', 'npy(*.npy)')
        # loaded_file = open(f"{pcd_template_filepath}", 'r')
        self.loaded_matrix = np.load(f"{matrix_filepath}")
        self.matrix.setPlainText(str(self.loaded_matrix))

        matrix = self.loaded_matrix

        # self.pcd_target = self.pcd_target.transform(self.global_transformation_matrix)
        self.icp_result = self.pcd_target.transform(matrix)

        result_viewer = point_cloud_viewer.PointCloudViewer(parent=self.ict_result, pcd=self.icp_result, type="Result")
        self.ict_result.clear()
        self.ict_result.addItem(result_viewer.pcd_plot_item)

    def clear_view(self):
        self.Pcd_template.clear()
        self.Ict_target.clear()
        self.ict_result.clear()
        # print(matrix.shape)




    def open_pre_change(self):
        # # app = QtWidgets.QApplication(sys.argv)

        # self.pre_change_window = GLViewWidget()
        #
        # self.ui = pre_change.Ui_pre_change(self.original_pcd_target, self.pcd_template)
        #
        # self.ui.setupUi(self.pre_change_window)
        #
        # self.pre_change_window.show()
        # # sys.exit(app.exec())

        original_target = o3d.io.read_point_cloud(self.original_target_path)

        self.pre_change_attributions = pre_change_attributions.pre_change_attributions(original_target)
        self.switch_to_prechange()

        self.show_pre_change_pcd()
####################################################################################### Pre change Actions

    def setupPreChangeUI(self, pre_change):
        pre_change.setObjectName("pre_change")
        pre_change.resize(1116, 841)
        pre_change.setStyleSheet("background-color: rgb(155, 155, 155);")

        self.prechange_view = GLViewWidget(parent=pre_change)
        self.prechange_view.setGeometry(QtCore.QRect(20, 20, 871, 801))
        self.prechange_view.setBackgroundColor(QtGui.QColor(135, 135, 135))
        self.prechange_view.setObjectName("prechange_view")


        self.default_change = QtWidgets.QRadioButton(parent=pre_change)
        self.default_change.setGeometry(QtCore.QRect(920, 40, 141, 31))
        self.default_change.setObjectName("default_change")
        self.import_change = QtWidgets.QRadioButton(parent=pre_change)
        self.import_change.setGeometry(QtCore.QRect(920, 90, 151, 31))
        self.import_change.setObjectName("import_change")
        self.manual_change = QtWidgets.QRadioButton(parent=pre_change)
        self.manual_change.setGeometry(QtCore.QRect(920, 250, 121, 31))
        self.manual_change.setObjectName("manual_change")


        self.import_change_name = QtWidgets.QLabel(parent=pre_change)
        self.import_change_name.setGeometry(QtCore.QRect(930, 180, 151, 61))
        self.import_change_name.setObjectName("import_change_name")
        self.import_button = QtWidgets.QPushButton(parent=pre_change)
        self.import_button.setGeometry(QtCore.QRect(950, 130, 90, 34))
        self.import_button.setObjectName("import_button")


        self.label = QtWidgets.QLabel(parent=pre_change)
        self.label.setGeometry(QtCore.QRect(930, 310, 58, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.label.setFont(font)
        self.label.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.label.setObjectName("label")
        self.X_add = QtWidgets.QPushButton(parent=pre_change)
        self.X_add.setGeometry(QtCore.QRect(980, 310, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.X_add.setFont(font)
        self.X_add.setObjectName("X_add")
        self.X_minus = QtWidgets.QPushButton(parent=pre_change)
        self.X_minus.setGeometry(QtCore.QRect(1030, 310, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.X_minus.setFont(font)
        self.X_minus.setObjectName("X_minus")
        self.label_2 = QtWidgets.QLabel(parent=pre_change)
        self.label_2.setGeometry(QtCore.QRect(930, 430, 58, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.label_2.setFont(font)
        self.label_2.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.label_2.setObjectName("label_2")
        self.X_clockwise = QtWidgets.QPushButton(parent=pre_change)
        self.X_clockwise.setGeometry(QtCore.QRect(980, 360, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.X_clockwise.setFont(font)
        self.X_clockwise.setObjectName("X_clockwise")
        self.Y_add = QtWidgets.QPushButton(parent=pre_change)
        self.Y_add.setGeometry(QtCore.QRect(980, 430, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Y_add.setFont(font)
        self.Y_add.setObjectName("Y_add")
        self.Y_minus = QtWidgets.QPushButton(parent=pre_change)
        self.Y_minus.setGeometry(QtCore.QRect(1030, 430, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Y_minus.setFont(font)
        self.Y_minus.setObjectName("Y_minus")
        self.Y_clockwise = QtWidgets.QPushButton(parent=pre_change)
        self.Y_clockwise.setGeometry(QtCore.QRect(980, 480, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Y_clockwise.setFont(font)
        self.Y_clockwise.setObjectName("Y_clockwise")
        self.X_counter = QtWidgets.QPushButton(parent=pre_change)
        self.X_counter.setGeometry(QtCore.QRect(1030, 360, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.X_counter.setFont(font)
        self.X_counter.setObjectName("X_counter")
        self.Y_counter = QtWidgets.QPushButton(parent=pre_change)
        self.Y_counter.setGeometry(QtCore.QRect(1030, 480, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Y_counter.setFont(font)
        self.Y_counter.setObjectName("Y_counter")
        self.Z_counter = QtWidgets.QPushButton(parent=pre_change)
        self.Z_counter.setGeometry(QtCore.QRect(1030, 600, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Z_counter.setFont(font)
        self.Z_counter.setObjectName("Z_counter")
        self.Z_clockwise = QtWidgets.QPushButton(parent=pre_change)
        self.Z_clockwise.setGeometry(QtCore.QRect(980, 600, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Z_clockwise.setFont(font)
        self.Z_clockwise.setObjectName("Z_clockwise")
        self.Z_add = QtWidgets.QPushButton(parent=pre_change)
        self.Z_add.setGeometry(QtCore.QRect(980, 550, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Z_add.setFont(font)
        self.Z_add.setObjectName("Z_add")
        self.label_3 = QtWidgets.QLabel(parent=pre_change)
        self.label_3.setGeometry(QtCore.QRect(930, 550, 58, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.label_3.setFont(font)
        self.label_3.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.label_3.setObjectName("label_3")
        self.Z_minus = QtWidgets.QPushButton(parent=pre_change)
        self.Z_minus.setGeometry(QtCore.QRect(1030, 550, 41, 34))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Z_minus.setFont(font)
        self.Z_minus.setObjectName("Z_minus")
        self.apply_button = QtWidgets.QPushButton(parent=pre_change)
        self.apply_button.setGeometry(QtCore.QRect(950, 670, 121, 51))
        self.apply_button.setObjectName("apply_button")
        self.cancel_button = QtWidgets.QPushButton(parent=pre_change)
        self.cancel_button.setGeometry(QtCore.QRect(950, 740, 121, 51))
        self.cancel_button.setObjectName("cancel_button")

        # print("repaint prechange ui")

        self.pre_change_button_bind()
        self.retranslatePreChangeUi(pre_change)
#################################################################### Set Button Default status

        self.import_button.setEnabled(False)

        self.X_add.setEnabled(False)
        self.X_minus.setEnabled(False)
        self.X_clockwise.setEnabled(False)
        self.X_counter.setEnabled(False)

        self.Y_add.setEnabled(False)
        self.Y_minus.setEnabled(False)
        self.Y_clockwise.setEnabled(False)
        self.Y_counter.setEnabled(False)

        self.Z_add.setEnabled(False)
        self.Z_minus.setEnabled(False)
        self.Z_clockwise.setEnabled(False)
        self.Z_counter.setEnabled(False)

        self.default_change.setChecked(True)


        QtCore.QMetaObject.connectSlotsByName(pre_change)


    def retranslatePreChangeUi(self, pre_change):

        _translate = QtCore.QCoreApplication.translate
        pre_change.setWindowTitle(_translate("pre_change", "粗配准设置"))
        self.default_change.setText(_translate("pre_change", "使用粗配准变换"))
        self.import_change.setText(_translate("pre_change", "导入粗配准文件"))
        self.manual_change.setText(_translate("pre_change", "手动粗配准"))
        self.import_change_name.setText(_translate("pre_change", "文件名："))
        self.import_button.setText(_translate("pre_change", "导入"))
        self.label.setText(_translate("pre_change", "X轴："))
        self.X_add.setText(_translate("pre_change", "+"))
        self.X_minus.setText(_translate("pre_change", "-"))
        self.label_2.setText(_translate("pre_change", "Y轴："))
        self.X_clockwise.setText(_translate("pre_change", "↻"))
        self.Y_add.setText(_translate("pre_change", "+"))
        self.Y_minus.setText(_translate("pre_change", "-"))
        self.Y_clockwise.setText(_translate("pre_change", "↻"))
        self.X_counter.setText(_translate("pre_change", "↺"))
        self.Y_counter.setText(_translate("pre_change", "↺"))
        self.Z_counter.setText(_translate("pre_change", "↺"))
        self.Z_clockwise.setText(_translate("pre_change", "↻"))
        self.Z_add.setText(_translate("pre_change", "+"))
        self.label_3.setText(_translate("pre_change", "Z轴:"))
        self.Z_minus.setText(_translate("pre_change", "-"))
        self.apply_button.setText(_translate("pre_change", "应用并配准"))
        self.cancel_button.setText(_translate("pre_change", "取消"))



    def pre_change_button_bind(self):
        self.cancel_button.clicked.connect(self.switch_to_ict)
        self.X_add.clicked.connect(self.add_x)
        self.X_minus.clicked.connect(self.minus_x)
        self.Y_add.clicked.connect(self.add_y)
        self.Y_minus.clicked.connect(self.minus_y)
        self.Z_add.clicked.connect(self.add_z)
        self.Z_minus.clicked.connect(self.minus_z)

        self.X_clockwise.clicked.connect(self.clock_x)
        self.X_counter.clicked.connect(self.counter_x)
        self.Y_clockwise.clicked.connect(self.clock_y)
        self.Y_counter.clicked.connect(self.counter_y)
        self.Z_clockwise.clicked.connect(self.clock_z)
        self.Z_counter.clicked.connect(self.counter_z)

        self.import_button.clicked.connect(self.load_pre_change_matrix)

        ########################################################## Ratio Button Checked Bind
        self.manual_change.clicked.connect(self.manual_change_chekced)
        self.import_change.clicked.connect(self.import_change_checked)

        self.apply_button.clicked.connect(self.apply_pre_change)


    def import_change_checked(self):
        self.import_button.setEnabled(True)

        self.X_add.setEnabled(False)
        self.X_minus.setEnabled(False)
        self.X_clockwise.setEnabled(False)
        self.X_counter.setEnabled(False)

        self.Y_add.setEnabled(False)
        self.Y_minus.setEnabled(False)
        self.Y_clockwise.setEnabled(False)
        self.Y_counter.setEnabled(False)

        self.Z_add.setEnabled(False)
        self.Z_minus.setEnabled(False)
        self.Z_clockwise.setEnabled(False)
        self.Z_counter.setEnabled(False)


    def manual_change_chekced(self):

        self.import_button.setEnabled(False)

        self.X_add.setEnabled(True)
        self.X_minus.setEnabled(True)
        self.X_clockwise.setEnabled(True)
        self.X_counter.setEnabled(True)

        self.Y_add.setEnabled(True)
        self.Y_minus.setEnabled(True)
        self.Y_clockwise.setEnabled(True)
        self.Y_counter.setEnabled(True)

        self.Z_add.setEnabled(True)
        self.Z_minus.setEnabled(True)
        self.Z_clockwise.setEnabled(True)
        self.Z_counter.setEnabled(True)

    def show_pre_change_pcd(self):
        self.prechange_view.clear()
        pcd_viewer = prechange_viewer.PreChangeViewer(parent=self.page_prechange, pcd_target=self.pre_change_attributions.pre_change_pcd,
                                                      pcd_template=self.pcd_template)
        self.prechange_view.addItem(pcd_viewer.target_plot_item)
        self.prechange_view.addItem(pcd_viewer.template_plot_item)




    def add_x(self):

        x_add_matrix = np.asarray([[1, 0, 0, 1],
                                   [0, 1, 0, 0],
                                   [0, 0, 1, 0],
                                   [0, 0, 0, 1]])
        self.pre_change_attributions.change_matrix =  self.pre_change_attributions.change_matrix @ x_add_matrix
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(x_add_matrix)
        print(self.pre_change_attributions.change_matrix)

        self.show_pre_change_pcd()



    def minus_x(self):
        x_minus_matrix = np.asarray([[1, 0, 0, -1],
                                   [0, 1, 0, 0],
                                   [0, 0, 1, 0],
                                   [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(x_minus_matrix)
        self.pre_change_attributions.change_matrix = self.pre_change_attributions.change_matrix @ x_minus_matrix

        self.show_pre_change_pcd()

    def add_y(self):
        y_add_matrix = np.asarray([[1, 0, 0, 0],
                                   [0, 1, 0, 1],
                                   [0, 0, 1, 0],
                                   [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(y_add_matrix)
        self.pre_change_attributions.change_matrix = self.pre_change_attributions.change_matrix @ y_add_matrix

        self.show_pre_change_pcd()

    def minus_y(self):
        y_minus_matrix = np.asarray([[1, 0, 0, 0],
                                   [0, 1, 0, -1],
                                   [0, 0, 1, 0],
                                   [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(y_minus_matrix)
        self.pre_change_attributions.change_matrix = self.pre_change_attributions.change_matrix @ y_minus_matrix

        self.show_pre_change_pcd()

    def add_z(self):
        z_add_matrix = np.asarray([[1, 0, 0, 0],
                                   [0, 1, 0, 0],
                                   [0, 0, 1, 1],
                                   [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(z_add_matrix)
        self.pre_change_attributions.change_matrix = self.pre_change_attributions.change_matrix @ z_add_matrix

        self.show_pre_change_pcd()

    def minus_z(self):
        z_minus_matrix = np.asarray([[1, 0, 0, 0],
                                   [0, 1, 0, 0],
                                   [0, 0, 1, -1],
                                   [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(z_minus_matrix)
        self.pre_change_attributions.change_matrix = self.pre_change_attributions.change_matrix @ z_minus_matrix

        self.show_pre_change_pcd()

    def clock_x(self):
        x_clock_matrix = np.asarray([[1, 0, 0, 0],
                                    [0, 0.99619, -0.08716, 0],
                                    [0, 0.08716, 0.99619, 0],
                                    [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(x_clock_matrix)
        self.pre_change_attributions.change_matrix =   x_clock_matrix @ self.pre_change_attributions.change_matrix

        self.show_pre_change_pcd()

    def counter_x(self):
        x_counter_matrix = np.asarray([[1, 0, 0, 0],
                                     [0, 0.99619, 0.08716, 0],
                                     [0, -0.08716, 0.99619, 0],
                                     [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(x_counter_matrix)
        self.pre_change_attributions.change_matrix = x_counter_matrix @ self.pre_change_attributions.change_matrix

        self.show_pre_change_pcd()

    def clock_y(self):
        y_clock_matrix = np.asarray([[0.99619, 0, 0.08716, 0],
                                     [0, 1, 0, 0],
                                     [-0.08716, 0, 0.99619, 0],
                                     [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(y_clock_matrix)
        self.pre_change_attributions.change_matrix =  y_clock_matrix @ self.pre_change_attributions.change_matrix

        self.show_pre_change_pcd()

    def counter_y(self):
        y_counter_matrix = np.asarray([[0.99619, 0, -0.08716, 0],
                                     [0, 1, 0, 0],
                                     [0.08716, 0, 0.99619, 0],
                                     [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(y_counter_matrix)
        self.pre_change_attributions.change_matrix =  y_counter_matrix @ self.pre_change_attributions.change_matrix

        self.show_pre_change_pcd()

    def clock_z(self):
        z_clock_matrix = np.asarray([[0.99619, -0.08716, 0, 0],
                                     [0.08716, 0.99619, 0, 0],
                                     [0, 0, 1, 0],
                                     [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(z_clock_matrix)
        self.pre_change_attributions.change_matrix =  z_clock_matrix @ self.pre_change_attributions.change_matrix

        self.show_pre_change_pcd()

    def counter_z(self):
        z_counter_matrix = np.asarray([[0.99619, 0.08716, 0, 0],
                                     [-0.08716, 0.99619, 0, 0],
                                     [0, 0, 1, 0],
                                     [0, 0, 0, 1]])
        self.pre_change_attributions.pre_change_pcd = self.pre_change_attributions.pre_change_pcd.transform(z_counter_matrix)
        self.pre_change_attributions.change_matrix =  z_counter_matrix @ self.pre_change_attributions.change_matrix

        self.show_pre_change_pcd()

#################################################  Show Original Not Used; Use The Cancel Button To Do The Thing
    def show_original(self):

        original_target = o3d.io.read_point_cloud(self.original_target_path)

        self.prechange_view.clear()
        print('show original')
        pcd_viewer = prechange_viewer.PreChangeViewer(parent=self.page_prechange, pcd_target=original_target,
                                                      pcd_template=self.pcd_template)
        self.prechange_view.addItem(pcd_viewer.target_plot_item)
        self.prechange_view.addItem(pcd_viewer.template_plot_item)


    def load_pre_change_matrix(self):

        select_form = QFileDialog()
        matrix_filepath, _ = select_form.getOpenFileName(None, '选择粗校准矩阵', '.', 'npy(*.npy)')
        # loaded_file = open(f"{pcd_template_filepath}", 'r')

        loaded_matrix = np.load(f"{matrix_filepath}")
        self.import_change_name.setText(f"文件名：{matrix_filepath}")
        self.pre_change_attributions.change_matrix = loaded_matrix
        self.pre_change_attributions.pre_change_pcd = o3d.io.read_point_cloud(self.original_target_path).transform(loaded_matrix)
        self.show_pre_change_pcd()



    def apply_pre_change(self):
        if self.manual_change.isChecked():

            final_change_matrix = self.pre_change_attributions.change_matrix
        elif self.default_change.isChecked():
            final_change_matrix = self.global_transformation_matrix
        elif self.import_change.isChecked():
            final_change_matrix = self.pre_change_attributions.change_matrix

        self.switch_to_ict()
        target_pcd = o3d.io.read_point_cloud(self.original_target_path)

        # self.draw_registration_result(self.pre_change_attributions.pre_change_pcd, target_pcd.transform(final_change_matrix))
        time = datetime.datetime.now()

        np.save(f"Data/global_presets/Global_Preset_{time}.npy", final_change_matrix)

        icp_registrator = Icp_registrator.ICP_Registrator(self.pcd_template, target_pcd.transform(final_change_matrix))
        self.icp_result, self.icp_matrix, fitness, rmse = icp_registrator.icp_registration()
        o3d.io.write_point_cloud(f"Data/Output/Output{self.target_name}.pcd", self.icp_result)
        self.matrix.setPlainText(str(self.icp_matrix))
        result_viewer = point_cloud_viewer.PointCloudViewer(parent=self.ict_result, pcd=self.icp_result, type="Result")
        self.ict_result.clear()
        self.ict_result.addItem(result_viewer.pcd_plot_item)



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
